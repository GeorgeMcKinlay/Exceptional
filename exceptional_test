os.unloadAPI(shell.resolve("exceptional"))
os.loadAPI(shell.resolve("exceptional"))

try {
	function()
		--# Is handled.
		throw {
			Type = "ItDoesntWorkError",
			WhatDoesntWork = "It just doesn't work!"
		}

		--# These aren't actually called because throw terminates the function.
		--# Throws a LuaError.
		error("Some boring error.")

		--# Is caught by the catch statement because it's unhandled.
		throw {
			Type = "SomeException"
		}

		--# If an exception doesn't have a handler and there is no catch statement,
		--# the exception is suppressed completely.
	end
} :LuaError {
	function(e)
		--# e is the exception table
		printError("There was an error on line " .. e.Line .. " in chunk \"" .. e.Chunk .. "\"!")
		printError("Details: " .. e.Message)
	end
} :ItDoesntWorkError {
	function(e)
		printError("It doesn't work on line " .. e.Line .. " in chunk \"" .. e.Chunk .. "\"!")
		printError("Details: " .. e.WhatDoesntWork)
	end
} :catch {
	function(e)
		printError("Caught exception of type " .. e.Type .. " on line " .. e.Line .. " in chunk \"" .. e.Chunk .. "\"!")
	end
}